"""
`NotImplemented` – специальное значение, которое можно вернуть из
метода сравнения в случае, когда сравнение между операндами невозможно, как описано выше.

`NotImplementedError` – это исключение, которое возникает, когда
абстрактный метод должен быть имплементирован классом-наследником,
 если класс_MIXIN не поддерживает этот метод, то должно быть явно указано это
 через `NotImplementedError`, однако используется он для понятия ошибки разработки
 не тестирования доступности метода сравнения разных типов объектов.


Как это работает с наследованием?

@total_ordering - декоратор, который позволяет определить все методы сравнения
Нам надо определить метод проверки на равенство
И один из методов сравнения: меньше, меньше или равно, больше, больше или равно

__call__ - вызов объекта как функции


Как это работает с наследованием?

@total_ordering - декоратор, который позволяет определить все методы сравнения
Нам надо определить метод проверки на равенство
И один из методов сравнения: меньше, меньше или равно, больше, больше или равно
Не нужно описывать методы, а только два.

__call__ - вызов объекта как функции

"""
from functools import total_ordering


class Cities:
    cities = ['Москва', 'Новосибирск', 'Самара', 'Екатеринбург']


class Game:
    def __init__(self, cities: Cities):  # Это Агрегация - сбор данных из вне
        self.Cities = cities

    def print_cities(self):
        print(self.Cities.cities)


class GameManager:
    def __init__(self):
        self.Cities = Cities()  # Это Композиция - вызывание классов
        self.Game = Game(self.Cities)

    def __call__(self, name):  # Делает объект колобол типа, который можно вызывать
        print(f'Привет, {name}!')
        self.Game.print_cities()


if __name__ == '__main__':
    name = input('Введите ваше имя: ')
    game_manager = GameManager()
    game_manager(name)
